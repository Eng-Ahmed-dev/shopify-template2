<header>


  <!-- Top Navigation for Desktop  -->
  <nav class="hidden md:flex justify-between items-center bg-black py-4">
    <div class="flex gap-4 mx-10 my-3 text-white">
      <p>{{ shop.name  | escape }}</p>
      <a href="{{ routes.root_url }}">
        {{ section.settings.text1 }}
      </a>
      <a href="{{ routes.collections_url }}">
        {{ section.settings.text2 | upcase }}
      </a>
      <a href="{{ routes.contact_url }}">
        {{ section.settings.text3 | upcase }}
      </a>
    </div>
    <div class="flex items-center gap-4 px-10 text-white">
      <button id="search-icon-desktop" class="cursor-pointer" >{% render 'search-icon' %}</button>
      {% if customer %}
        <a href="{{ routes.account_url }}" class="h-7 w-7 rounded-full overflow-hidden flex items-center justify-center bg-gray-700 text-white">
          {{ customer.first_name | slice: 0, 1 | upcase }}
        </a>
      {% else %}
        <a href="{{ routes.account_login_url }}">{% render 'account-icon' %}</a>
      {% endif %}
      <button id="cart-icon">{% render 'cart-icon' %}</button>
      
    </div>
  </nav>
<!--  overlay -->
<div id="overlay" class="fixed bg-black/50 inset-0 pointer-events-none opacity-0 transition-opacity duration-300 z-99"></div>

<!-- search slideout  -->
<div id="search-bar" class="fixed z-100 top-0 right-0 left-0 h-26 bg-white translate-x-full transform transition-transform ease-in-out duration-300">
  <button class="flex items-end close-search">
    {% render 'x-icon' %}
  </button>
<div class="flex flex-row justify-center">
  <form method="get" action="{{ routes.search_url }}">
    <input 
      type="search" 
      name="q" 
      placeholder="Search" 
      class="border border-gray-300 p-2"
    >
    <button 
      type="submit" 
      class="inline p-2 bg-black text-white"
    >
      Search
    </button>
  </form>
</div>

</div>
<!-- Cart slideout -->

<aside id="cart-slider" class="mobile-cart-slidout bg-white shadow-2xl fixed top-0 bottom-0 right-0 translate-x-full w-[90%] md:w-1/2 lg:w-1/4  transform transition-transform duration-300 z-100">
  
    <div class="flex flex-col justify-between h-full p-4">

      <div class="flex justify-between ">
        <h2 class="text-2xl font-bold ">Cart</h2> 
        <button id="cart-hider">{% render 'x-icon' %}</button>
      </div>
      {% if cart.item_count >0 %} 
        <div class="py-4 grid overflow-y-auto">
          <ul id="cart-items" class="">
          
            {% for item in cart.items %}
              <!-- Render each cart item -->
              <li class="py-2 grid grid-cols-3 columns-3  gap-2 mb-4 border-b text-xs product-card" data-id="{{ item.variant_id }}" >
                <div class="col-span-1">
                  <img src="{{ item.image | img_url: 'small' }}" alt="{{ item.title }}" loading="lazy">
                </div>
                <div class="flex flex-col gap-2">
                  <p class="">{{ item.product.title }}</p>
                    <!-- async reduce,add and remove then update the cart-->
                  <div>
                      <div class="flex gap-4 qty-control">
                        <div class="border flex gap-2 px-3 py-2 border-gray-300">                
                          <button class="add-btn cursor-pointer">+</button>
                          <input class="item-qty outline-none w-8 mx-2" type="number" readonly min="1" value="{{ item.quantity }}">
                          <button class="reduce-btn cursor-pointer">-</button>
                        </div>
                        <!-- remove item -->
                        <button class="remove-btn cursor-pointer">
                          🗑
                        </button>
                      </div>
                      <div class="show-msg text-xs font-light py-1 px-2"></div>
                    </div>
                  
                  <div class="flex text-gray-700 font-light">
                    <p> {{ item.final_price | money }}</p>
                    <p class="line-through"> {{ item.discount_allocations |  money }} </p>
                  </div>
                  
                </div>
                <div>
                  {{ item.line_price | money }}
                </div>
              </li>
            {% endfor %}
          </ul>
        </div>
          
        <div>
          <form action="{{ routes.cart_url }}" method="POST" novalidate>
              <div class="bg-white py-4 w-full flex justify-between">
                <p>total:</p> 
                <p class="text-2xl font-bold"> {{ cart.total_price | money }}</p>
              </div>
              <button type="submit" name="checkout" class="text-white w-full py-4 text-lg bg-black cursor-pointer">Cheackout</button>
          </form>         
       </div>
       
      {% else %}
        <div class="flex flex-col items-center justify-center h-full">
          <p class="text-2xl font-bold mb-4">Your cart is empty</p>
          <a class="underline text-blue-400" href="{{ routes.collections_url }}"> shop now </a>
        </div>
      {% endif %}
    </div>
</aside>
<div id="mobile-overlay" class="fixed bg-black/50 inset-0 pointer-events-none opacity-0 transition-opacity duration-300 z-99"></div>

<!-- the side mobile menu -->
<aside id="mobile-ham-menu" 
  class="bg-white fixed top-0 left-0 bottom-0 w-[90%] -translate-x-full md:hidden z-100 transition-transform duration-300">
  
  <button id="mobile-close" class="text-center items-center p-2">
    {% render 'x-icon' %}
  </button>
  
  <div class="flex flex-col px-4 py-3 font-bold">
    <a class="uppercase text-lg py-2 text-black" href="{{ routes.root_url }}"> {{ section.settings.text1 }}</a>
    <a class="uppercase text-lg py-2 text-black" href="{{ routes.collections_url }}"> {{ section.settings.text2 }}</a>
    <a class="uppercase text-lg py-2 text-black" href="{{ section.settings.custom_id }}"> {{ section.settings.text3 }}</a>
  </div>
</aside> 
</header>



      
{% comment %} mobile navigation {% endcomment %}
  <nav class="flex justify-between py-10 bg-black md:hidden p-4">
    <div class="flex items-center gap-4">
      <button id="mobile-side" class="open-btn text-white items-center justify-center text-center cursor-pointer ">{% render 'menu' %}</button>
      <button class="text-white search-bar"><a href="{{ routes.search_url }}">{% render 'search-icon' %}</a></button>
    </div>
    <div class="flex items-center gap-4 text-white">
      {% if customer %}
        <a href="{{ routes.account_url }}" class="h-8 w-8 rounded-full overflow-hidden flex items-center justify-center bg-gray-700 text-white">
          {{ customer.first_name | slice: 0, 1 | upcase }}
        </a>
      {% else %}
        <a href="{{ routes.account_login_url }}">{% render 'account-icon' %}</a>
      {% endif %}
      <button id="mobile-cart-icon">{% render 'cart-icon' %}</button>
    </div>
  </nav>
  <script>
    const mobOverlay = document.getElementById('mobile-overlay');
    const closeBTN = document.getElementById('mobile-close');
    const openBtn = document.getElementById('mobile-side');
    const mobileMenu = document.getElementById('mobile-ham-menu');

    function openMobileSide() {
      mobileMenu.classList.remove("-translate-x-full");
      
      

      mobOverlay.classList.remove("pointer-events-none", "opacity-0");
      mobOverlay.classList.add("pointer-events-auto", "opacity-100");
    }

    function closeMobileSide() {

      mobileMenu.classList.add("-translate-x-full");

      mobOverlay.classList.remove("pointer-events-auto", "opacity-100");
      mobOverlay.classList.add("pointer-events-none", "opacity-0");
    }

    openBtn.addEventListener("click", openMobileSide);
    closeBTN.addEventListener("click", closeMobileSide);
    mobOverlay.addEventListener("click", closeMobileSide);

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        closeMobileSide();
      }
    });
  </script>

<script>
  // open and close cart slideout
  let mobileCartIcon = document.getElementById("mobile-cart-icon");
  let cartIcon = document.getElementById("cart-icon");
  const mobileCartSlidout = document.querySelector(".mobile-cart-slidout")
  let cartSlider = document.getElementById("cart-slider");
  let cartHider = document.getElementById("cart-hider");
  let overlay = document.getElementById("overlay");
  function openCart() {
    cartSlider.classList.remove("translate-x-full");
    cartSlider.classList.add("translate-x-0");
    overlay.classList.remove("pointer-events-none", "opacity-0");
    overlay.classList.add("pointer-events-auto", "opacity-100");
  }
  function closeCart() {
    cartSlider.classList.remove("translate-x-0");
    cartSlider.classList.add("translate-x-full");
    overlay.classList.remove("pointer-events-auto", "opacity-100");
    overlay.classList.add("pointer-events-none", "opacity-0");
  }
  mobileCartIcon.addEventListener("click", openCart);
  cartIcon.addEventListener("click", openCart);
  cartHider.addEventListener("click", closeCart);
  overlay.addEventListener("click", closeCart);
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      closeCart();
    }
  });
  // cart fuctionality and ajax
  


</script>
<script>
  let overlay = document.getElementById("overlay");
  let searchBar = document.getElementById("search-bar");
  let closeSearchBtn = document.querySelector(".close-search");

  // Desktop search button
  let searchIconDesktop = document.getElementById("search-icon-desktop");
  // Mobile search button
  let searchIconMobile = document.getElementById("search-icon-mobile");

  function openSearch() {
    overlay.classList.remove("pointer-events-none", "opacity-0");
    overlay.classList.add("pointer-events-auto", "opacity-100");
    searchBar.classList.remove("translate-x-full");
  }

  function closeSearch() {
    overlay.classList.remove("pointer-events-auto", "opacity-100");
    overlay.classList.add("pointer-events-none", "opacity-0");
    searchBar.classList.add("translate-x-full");
  }

  // Bind events
  if (searchIconDesktop) searchIconDesktop.addEventListener("click", openSearch);
  if (searchIconMobile) searchIconMobile.addEventListener("click", openSearch);

  overlay.addEventListener("click", closeSearch);
  closeSearchBtn.addEventListener("click", closeSearch);

  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") closeSearch();
  });

</script>
<!---->
<script>
            // Function to update a cart item in Shopify
      async function updateCartElemnts(variantId, newQuantity) {
        try {
          const response = await fetch("/cart/change.js", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Accept": "application/json"
            },
            body: JSON.stringify({
              id: variantId,
              quantity: newQuantity
            }),
            credentials: "same-origin" 
          });

          if (!response.ok) {
            throw new Error(`Error updating cart: ${response.statusText}`);
          }

          const cartData = await response.json();
          return cartData;

        } catch (error) {
          console.error("Cart update failed:", error);
          return null;
        }
      }

      // Event listener on the cart list
      const lists = document.getElementById("cart-items");

      lists.addEventListener("click", async (e) => {
        if (e.target.matches(".add-btn")) {
          const card = e.target.closest(".product-card");
          const id = card.dataset.id;
          let itemQty = parseInt(card.querySelector(".item-qty").value, 10) || 0;

          itemQty += 1;
          const cartData = await updateCartElemnts(id, itemQty);
          if (cartData) {
            card.querySelector(".item-qty").value = itemQty;
            const lineItem = cartData.items.find(i => i.id === id);
            if (lineItem) {
              card.querySelector(".line-price").textContent = Shopify.formatMoney(lineItem.line_price);
            }

            card.querySelector('.show-msg').textContent  = 'added ✔'
          }else{
            alert("can't add more to cart")
          }
        }

        if (e.target.matches(".reduce-btn")) {
          const card = e.target.closest(".product-card");
          const id = card.dataset.id;
          let itemQty = parseInt(card.querySelector(".item-qty").value, 10) || 0;

          if (itemQty > 1) {
            itemQty --;
            const cartData = await updateCartElemnts(id, itemQty);
            if (cartData) {
              card.querySelector(".item-qty").value = itemQty;

              const lineItem = cartData.items.find(i => i.id === id);
              if (lineItem) {
                card.querySelector(".line-price").textContent = Shopify.formatMoney(lineItem.line_price);
              }

              card.querySelector('.show-msg').textContent  = 'Reduced ❌'
              card.update()
            }else{
              alert("can't reduce the cart")
            }
            

          } else {
            // remove when reaching 0
            const cartData = await updateCartElemnts(id, 0);
            if (cartData) {
              card.remove();
              alert( "item removed" );
              
            }
          }
        }

        if (e.target.matches(".remove-btn")) {
          const card = e.target.closest(".product-card");
          const id = card.dataset.id;

          const cartData = await updateCartElemnts(id, 0);
          if (cartData) {
            card.remove();
            
            alert( "item removed" );
          }else{
            alert('failed to remove the item')
          }
        }
      });            
</script>

{% schema %}
{
  "name": "Header",
  "settings": [
    {
      "type": "text",
      "id": "text1",
      "label": "Home Page ",
      "default": "HOME"
    },
    {
      "type": "text",
      "id": "text2",
      "label": "Collection Page ",
      "default": "COLLECTIONS"
    },
    {
      "type": "text",
      "id": "text3",
      "label": "Contact Page ",
      "default": "CONTACT"
    },
    {
      "type": "url",
      "id": "custom_id",
      "default": "/",
      "label": "Custom URL"
    }
  ]
}
{% endschema %}
