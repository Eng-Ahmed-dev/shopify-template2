{% if cart.item_count > 0 %}
  <div class="px-4 md:px-10">
    <div class="flex items-center gap-4">
        <h1 class="uppercase font-bold text-xl my-5"> Cart</h1>
      <span class="cart-counter h-6 w-6 p-2 bg-gray-300 text-black text-sm font-bold rounded-full flex justify-center items-center">
        {{ cart.item_count }}
      </span>
    </div>

    <!--cart items-->
    <div class="flex flex-col md:flex-row justify-between my-4 gap-2 text-sm">
      <div class="w-full ">
        <ul id="cart-list">  
          <li class="hidden md:grid grid-cols-4 items-center gap-4 py-4 border-gray-400 uppercase">
            <div class="">product</div>
           <div class="">details</div>
            <div>quantity</div>
            <div>price</div>
          </li>    
          {% for item in cart.items %}
            {% comment %} desktop version {% endcomment %}
            <li class="product-card hidden md:grid grid-cols-4 items-center gap-4 border-t border-gray-400 " data-id="{{ item.variant_id }}">
              <!--product image-->
              <div>
                <a href="{{ item.url }}">
                  <div class="min-w-30 max-w-38  ">
                    <img src="{{ item.image | img_url: 'medium' }}" alt="">
                  </div>
                </a>
                
              </div>
              <!--details-->
              <div class="flex flex-col gap-2 ">
                <a href="{{ item.url }}" class="font-medium">{{ item.title }}</a>
                <div class="flex gap-2">
                  <p>{{ item.price | money }}</p>
                  {% if item.price < item.variant.compare_at_price   %}
                    <p class="line-through font-light text-gray-500">
                      {{ item.variant.compare_at_price | money }}
                    </p>
                  {% endif %}
                </div>                
              </div>
              <!-- async reduce,add and remove then update the cart-->
               <div>
                  <div class="flex gap-4 qty-control">
                    <div class="border flex gap-2 px-3 py-2 border-gray-300">                
                      <button class="add-btn cursor-pointer">+</button>
                      <input class="item-qty outline-none w-8 mx-2" type="number" readonly min="1" value="{{ item.quantity }}">
                      <button class="reduce-btn cursor-pointer">-</button>
                    </div>
                    <!-- remove item -->
                    <button class="remove-btn cursor-pointer">
                      üóë
                    </button>
                  </div>
                  <div class="show-msg text-xs font-light py-1 px-2"></div>
                </div>

              <div class="line-price"> {{ item.line_price | money }}</div>
            </li>
            <!-- mobile cart -->
            <li class="py-2 grid grid-cols-3 columns-3  gap-2 mb-4 border-t border-gray-400 text-xs md:hidden ">
              <div class="col-span-1">
                <img src="{{ item.image | img_url: 'small' }}" alt="{{ item.title }}" loading="lazy">
              </div>
              <div class="flex flex-col gap-2">
                <p class="">{{ item.product.title }}</p>
                <!--quantity-->
                <div class="flex gap-4">
                  <div class="border flex gap-2 px-3 py-2 border-gray-300">
                    <button class="qty-btn" data-key="{{ item.key }}" data-change="1">+</button>
                    <span id="qty-{{ item.key }}">{{ item.quantity }}</span>
                    <button class="qty-btn" data-key="{{ item.key }}" data-change="-1">-</button>
                  </div>

                  <!-- remove item -->
                  <a href="{{ item.url_to_remove }}">
                    <i>{% render 'trash-can-icon' %}</i>
                  </a>
                </div>
        
                <div class="flex text-gray-700 font-light">
                  <p> {{ item.final_price | money }}</p>
                  <p class="line-through"> {{ item.discount_allocations |  money }} </p>
                </div>
                
              </div>
              <div>
                {{ item.line_price | money }}
              </div>
             </li>                
          {% endfor %}
        </ul>
      </div>

      <!--the checkout part for both-->
      <div class="w-full md:w-1/3 border-gray-400">
        <div class="flex flex-col gap-4 py-4 border-t border-gray-400">
          <div class="discount-dropdown flex justify-between cursor-pointer font-bold">
            <p>discount</p>
            <i class="plus transition-opacity duration-300 ease-in-out">+</i>
            <i class="hidden transition-opacity duration-300 ease-in-out hidder">-</i>
          </div>
          <div class="dropdown hidden  gap-2 justify-between items-center w-full  transition-opacity duration-300 ease-in-out">
            <input type="text" placeholder="Discount code" class="border py-2 px-1 ">
            <button class="text-white bg-black px-4 py-2  uppercase">apply</button>
          </div>
        </div>
        <div class="flex flex-col gap-4 py-4 border-t border-gray-400">
            <div class="flex justify-between items-center">
              <p>Estimated total</p>
              <p class="text-lg font-bold cart-total">{{ cart.total_price | money }}</p>
            </div>
            <p class="text-gray-500 text-xs">Taxes and shipping calculated at checkout.</p>
        </div>
        <div>
          <button class=" w-full py-4  bg-black text-white uppercase">Check out</button>
        </div>
        


        <!-- script for discount drop down  -->
        <script>
          let isOpen = false;
          const discount = document.querySelector('.discount-dropdown');
          const plus = document.querySelector('.plus');
          const hider = document.querySelector('.hidder');
          const dropdown = document.querySelector('.dropdown');
          function showDropdown(){
            dropdown.classList.remove('hidden');
            plus.classList.add('hidden');
            hider.classList.remove('hidden')
            hider.classList.add('flex')
            isOpen = true
          }
          function hideDropdown(){
            dropdown.classList.add('hidden');
            plus.classList.remove('hidden');
            hider.classList.add('hidden')
            hider.classList.remove('flex')
            isOpen = false
          }
          discount.addEventListener("click",()=>{
            if(isOpen){
             hideDropdown()
             }
            else{
            showDropdown() 
            }

          });

        </script>
        
      </div>
    </div>

    <script>
            // Function to update a cart item in Shopify
      async function updateCartItem(variantId, newQuantity) {
        try {
          const response = await fetch("/cart/change.js", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Accept": "application/json"
            },
            body: JSON.stringify({
              id: variantId,
              quantity: newQuantity
            }),
            credentials: "same-origin" 
          });

          if (!response.ok) {
            throw new Error(`Error updating cart: ${response.statusText}`);
          }

          const cartData = await response.json();
          return cartData;

        } catch (error) {
          console.error("Cart update failed:", error);
          return null;
        }
      }

      // Event listener on the cart list
      const list = document.getElementById("cart-list");

      list.addEventListener("click", async (e) => {
        if (e.target.matches(".add-btn")) {
          const card = e.target.closest(".product-card");
          const id = card.dataset.id;
          let itemQty = parseInt(card.querySelector(".item-qty").value, 10) || 0;

          itemQty += 1;
          const cartData = await updateCartItem(id, itemQty);
          if (cartData) {
            card.querySelector(".item-qty").value = itemQty;
            const lineItem = cartData.items.find(i => i.id === id);
            if (lineItem) {
              card.querySelector(".line-price").textContent = Shopify.formatMoney(lineItem.line_price);
               console.log(Shopify.formatMoney(lineItem.line_price));
              
            }

            card.querySelector('.show-msg').textContent  = 'added ‚úî'
          }else{
            alert("can't add more to cart")
          }
        }

        if (e.target.matches(".reduce-btn")) {
          const card = e.target.closest(".product-card");
          const id = card.dataset.id;
          let itemQty = parseInt(card.querySelector(".item-qty").value, 10) || 0;

          if (itemQty > 1) {
            itemQty --;
            const cartData = await updateCartItem(id, itemQty);
            if (cartData) {
              card.querySelector(".item-qty").value = itemQty;

              const lineItem = cartData.items.find(i => i.id === id);
              if (lineItem) {
                card.querySelector(".line-price").textContent = Shopify.formatMoney(lineItem.line_price);
                 console.log(Shopify.formatMoney(lineItem.line_price));
              }

              card.querySelector('.show-msg').textContent  = 'Reduced ‚ùå'
            
            }else{
              alert("can't reduce the cart")
            }
            

          } else {
            // remove when reaching 0
            const cartData = await updateCartItem(id, 0);
            if (cartData) {
              card.remove();
              alert( "item removed" );
              
            }
          }
        }

        if (e.target.matches(".remove-btn")) {
          const card = e.target.closest(".product-card");
          const id = card.dataset.id;

          const cartData = await updateCartItem(id, 0);
          if (cartData) {
            card.remove();
            
            alert( "item removed" );
          }else{
            alert('failed to remove the item')
          }
        }
      });
            
    </script>
  </div>
  
  
{% else %}
  <p class="font-bold  flex text-2xl p-8 uppercase">Cart </p>
  <div class="flex flex-col gap-3 items-center justify-center ">
    <h1 class="text-lg font-medium">{{ section.settings.header_text }}</h1>
    <p class="text-xs "> Have an account? <a class="underline text-blue-600  " href="">Log in</a> to check out faster. </p>
    <a class="px-4 py-3 bg-black text-xs text-white uppercase  " href="{{ section.settings.url }}">{{ section.settings.url_text }}</a>    
  </div>
{% endif %}

{% schema %}
{
  "name": "cart",
  "settings": [
      {
        "type": "text",
        "id": "header_text",
        "default":"Your cart is empty",
        "label": "header text"
      },
      {
        "type": "text",
        "id":"url_text",
        "label":"url text",
        "default": "Continue shopping"
      },
            {
        "type": "url",
        "id": "url",
        "default":"/collections",
        "label": "link"
      },
    
    ]
}
{% endschema %}